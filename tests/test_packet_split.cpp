//
// Created by lml on 2018/7/5.
//

#include <iostream>
#include <cstring>
#include <netinet/in.h>
#include "test_util.h"
#include "../src/core/modules/easn/easn_package.h"

using namespace easn;

void test_get_packet_info(){
    uint8_t data[] = {0xaa,0x55,0x01,0x00,0x00,0x00,0x01,0x00,0x1B,   0x7B,0x22,0x64,0x64,0x22,0x3A,0x22,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x22,0x7D,  0x00,0x00 };
    packet_t pt;
    memcpy(pt.buf,data,sizeof(data));
    uint32_t index = easn::indexof_packet(pt);
    int length = easn::sizeof_packet(pt);
    std::cout << "index:" << index << std::endl;
    assert_equal(1,index);
    std::cout << "length:" << length << std::endl;
    assert_equal(27,length);
}

void test_print_packet(){
    uint8_t data[] = {0xaa,0x55,0x01,0x00,0x00,0x00,0x01,0x00,0x1B,   0x7B,0x22,0x64,0x64,0x22,0x3A,0x22,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x22,0x7D,  0x00,0x00 };
    packet_t pt;
    memcpy(pt.buf,data,sizeof(data));
    debug_print_packet(pt);
}

void test_fill_crc(){
    uint8_t data[] = {0xaa,0x55,0x01,0x00,0x00,0x00,0x01,0x00,0x1B,   0x7B,0x22,0x64,0x64,0x22,0x3A,0x22,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x22,0x7D,  0x00,0x00 };
    packet_t pt;
    memcpy(pt.buf,data,sizeof(data));
    fill_crc(pt.buf,sizeof_packet(pt));
    debug_print_packet(pt);
}

void test_check_crc(){
    uint8_t data[] = {0xaa,0x55,0x01,0x00,0x00,0x00,0x01,0x00,0x1B,   0x7B,0x22,0x64,0x64,0x22,0x3A,0x22,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x22,0x7D,  0x38,0x31 };
    packet_t pt;
    memcpy(pt.buf,data,sizeof(data));
    bool is_right = check_crc(pt.buf,sizeof_packet(pt));
    if(is_right){
        std::cout << "CRC校验成功" << std::endl;
    }else{
        std::cerr << "CRC校验失败" << std::endl;
    }
    assert_equal(true,is_right);
}

void test_find_header(){
    uint8_t data1[] = {0xbb,0x77 };

    int pos1 = find_header_position(data1,0,sizeof(data1));
    assert_equal(-1,pos1);

    uint8_t data2[] = {0xbb,0x77,0xaa,0x55,0x01,0x00,0x00,0x00,0x01,0x00,0x1B,   0x7B,0x22,0x64,0x64,0x22,0x3A,0x22,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x22,0x7D,  0x38,0x31 };
    int pos = find_header_position(data2,0,sizeof(data2));
    assert_equal(2,pos);
}

int main(){
    const test_case test[] = {
            {"test_get_packet_info",&test_get_packet_info },
            {"test_print_packet",&test_print_packet },
            {"test_fill_crc",&test_fill_crc },
            {"test_check_crc",&test_check_crc },
            {"test_find_header",&test_find_header},

    };

    start_test(test , sizeof(test) / sizeof(test_case));
    return 0;
}